name: Weather App CI/CD

on:
  pull_request:
    branches: [ "main" ]
    paths: [ "app/**" ]
  push:
    branches: [ "main" ]
    paths: [ "app/**" ]

env:
  TEST_RG: cst8918-final-project-group-mish0032
  TEST_AKS: aks-test-mish0032
  PROD_RG: cst8918-final-project-group-mish0032
  PROD_AKS: aks-prod-mish0032
  TEST_ACR: acrtestmish0032
  PROD_ACR: acrprodmish0032
  IMAGE_NAME: weather
  NAMESPACE: weather
  DEPLOY: weather

jobs:
  build-and-push:
    name: Build & Push image to ACR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Decide which ACR to use based on event type
      - name: Select ACR name (PR -> test, push -> prod)
        id: select
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "acr=${{ env.TEST_ACR }}" >> $GITHUB_OUTPUT
          else
            echo "acr=${{ env.PROD_ACR }}" >> $GITHUB_OUTPUT
          fi

      # Secure login to ACR (no admin creds needed)
      - name: ACR login
        run: az acr login -n ${{ steps.select.outputs.acr }}

      - name: Build & Push
        run: |
          REG="${{ steps.select.outputs.acr }}.azurecr.io"
          TAG="${GITHUB_SHA}"
          docker build -t "$REG/${{ env.IMAGE_NAME }}:$TAG" ./app
          docker push "$REG/${{ env.IMAGE_NAME }}:$TAG"

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Select RG/AKS/ACR per event
      - name: Select environment (PR -> test, push -> prod)
        id: envsel
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "rg=${{ env.TEST_RG }}" >> $GITHUB_OUTPUT
            echo "aks=${{ env.TEST_AKS }}" >> $GITHUB_OUTPUT
            echo "acr=${{ env.TEST_ACR }}" >> $GITHUB_OUTPUT
          else
            echo "rg=${{ env.PROD_RG }}" >> $GITHUB_OUTPUT
            echo "aks=${{ env.PROD_AKS }}" >> $GITHUB_OUTPUT
            echo "acr=${{ env.PROD_ACR }}" >> $GITHUB_OUTPUT
          fi

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ steps.envsel.outputs.rg }}
          cluster-name:   ${{ steps.envsel.outputs.aks }}

      - name: Create namespace if missing
        run: |
          kubectl create namespace "${{ env.NAMESPACE }}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Update image on Deployment (if exists)
        run: |
          REG="${{ steps.envsel.outputs.acr }}.azurecr.io"
          TAG="${GITHUB_SHA}"
          kubectl -n "${{ env.NAMESPACE }}" set image deployment/${{ env.DEPLOY }} \
            ${{ env.DEPLOY }}="$REG/${{ env.IMAGE_NAME }}:$TAG" \
            || echo "Deployment not present yet; Terraform will create it."

      - name: Wait for rollout (if deployment exists)
        continue-on-error: true
        run: |
          kubectl -n "${{ env.NAMESPACE }}" rollout status deployment/${{ env.DEPLOY }} --timeout=120s
